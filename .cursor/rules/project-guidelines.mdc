---
description: 
globs: 
alwaysApply: true
---
# Coding Standards and Guidelines

You are an expert developer proficient in TypeScript, React and Next.js, Supabase, Zod, Turbo (Monorepo Management), Zustand, Shadcn

## Code Style and Structure

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files with exported components, subcomponents, helpers, static content, and types.
- Favor named exports for components and functions.
- Use lowercase with dashes for directory names (e.g., components/auth-wizard).

## TypeScript and Zod Usage

- Use TypeScript for all code; prefer interfaces over types for object shapes.
- Utilize Zod for schema validation and type inference.
- Avoid enums; use literal types or maps instead.
- Implement functional components with TypeScript interfaces for props.

## Syntax and Formatting

- Use the function keyword for pure functions.
- Write declarative JSX with clear and readable structure.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.

## UI and Styling
- Use modern UI frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI) for styling.
- Implement responsive design with a mobile-first approach.

## State Management and Data Fetching

- Use Zustand for state management.
- Minimize the use of useEffect and setState; favor derived state and memoization when possible.

## Supabase Client Usage for Data Fetching

- Implement Supabase client connections in API routes to protect sensitive information like API keys and service role tokens.
- Use server-side data fetching for initial page loads with Next.js App Router.
- Implement proper TypeScript types for database tables and query responses.
- Apply middleware for authentication validation when accessing protected resources.
- Handle RLS (Row Level Security) appropriately for different user roles.
- Utilize React Query or SWR for client-side data fetching with Supabase for better caching and state management.
- Implement type safety by deriving TypeScript types from your Supabase database schema.
- Handle authentication state with Supabase auth helpers and session management.
- Apply proper error handling for Supabase operations with try/catch blocks.
- Use environment variables for Supabase URLs and keys, never hardcode them.

## API Routes Usage

- Implement API routes for handling business logic before sending data to the client.
- Use API routes to protect sensitive credentials and keys.
- Implement data transformation/normalization in API routes rather than client-side.
- Use API routes for aggregating data from multiple sources before sending to the client.
- Add additional validation layers in API routes using Zod schemas.
- Implement rate limiting and request throttling at the API route level.
- Properly handle and format error responses from API routes.
- Structure API routes logically under the `/app/api` directory.

## Shadcn Integration

- Use the Shadcn CLI for installing and customizing components.
- Store all Shadcn components in the `components/ui` directory.
- Extend Shadcn components with custom variants using the Tailwind CSS extension pattern.
- Ensure theme consistency by configuring shared themes in `tailwind.config.js`.
- Use Shadcn's form components with Zod for seamless form validation.
- Implement consistent component styling across your application.
- Create reusable component compositions for frequently used UI patterns.
- Follow Shadcn's accessibility guidelines to ensure all components are fully accessible.
- Use Shadcn's CLI to add only the components you need to reduce bundle size.

## Error Handling and Validation

- Prioritize error handling and edge cases.
- Handle errors and edge cases at the beginning of functions.
- Use early returns for error conditions to avoid deep nesting.
- Utilize guard clauses to handle preconditions and invalid states early.
- Implement proper error logging and user-friendly error messages.
- Use custom error types or factories for consistent error handling.

## Performance Optimization

- Optimize for both web and mobile performance.
- Use dynamic imports for code splitting in Next.js.
- Implement lazy loading for non-critical components.
- Optimize images; use appropriate formats, include size data, and implement lazy loading.

## Monorepo Management

- Follow best practices using Turbo for monorepo setups.
- Ensure packages are properly isolated and dependencies are correctly managed.
- Use shared configurations and scripts where appropriate.
- Utilize the workspace structure as defined in the root package.json.

## Backend and Database

- Use Supabase for backend services, including authentication and database interactions.
- Follow Supabase guidelines for security and performance.
- Use Zod schemas to validate data exchanged with the backend.

## Testing and Quality Assurance

- Write unit and integration tests for critical components.
- Use testing libraries compatible with React and React Native.
- Ensure code coverage and quality metrics meet the project's requirements.

## Project Structure and Environment

- Follow the established project structure with separate packages for app, ui, and api.
- Use the apps directory for Next.js
- Utilize the packages directory for shared code and components.
- Use dotenv for environment variable management.
- Follow patterns for environment-specific configurations in eas.json and next.config.js.
- Utilize custom generators in turbo/generators for creating components, screens, and tRPC routers using yarn turbo gen.

## Key Conventions

- Use descriptive and meaningful commit messages.
- Ensure code is clean, well-documented, and follows the project's coding standards.
- Implement error handling and logging consistently across the application.

## Follow Official Documentation

- Adhere to the official documentation for each technology used.
- For Next.js, focus on data fetching methods and routing conventions.
- Stay updated with the latest best practices and updates, especially for Tamagui, and Supabase.

## Output Expectations

- Code Examples: Provide code snippets that align with the guidelines above.
- Explanations: Include brief explanations to clarify complex implementations when necessary.
- Clarity and Correctness: Ensure all code is clear, correct, and ready for use in a production environment.
- Best Practices: Demonstrate adherence to best practices in performance, security, and maintainability.