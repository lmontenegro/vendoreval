---
description: 
globs: 
alwaysApply: true
---
# Directrices para el Manejo de Usuarios y Roles en Supabase

## Estructura del Sistema
Tu sistema actual está compuesto por las siguientes tablas:
- `auth.users` - Tabla nativa de Supabase para autenticación
- `public.users` - Réplica extendida de auth.users con campos adicionales como profile_id, role_id, vendor_id
- `profiles` - Información de perfil del usuario
- `profile_permissions` - Permisos directos asignados a perfiles
- `roles` - Roles disponibles en el sistema
- `role_permissions` - Permisos asignados a roles
- `vendors` - Información de los proveedores/empresas

## Principios de Diseño

### 1. Sistema de Doble Tabla para Usuarios
- **auth.users**: Gestiona la autenticación a través de Supabase Auth
- **public.users**: Almacena información contextual y relaciones (profile_id, role_id, vendor_id)
- Esto permite:
  - Mantener sincronización con el sistema de autenticación
  - Añadir campos personalizados sin modificar la tabla de autenticación
  - Optimizar consultas al tener referencias directas a perfiles, roles y proveedores

### 2. Sistema de Permisos Híbrido
Tu estructura permite un sistema híbrido que combina:
- **Permisos basados en roles**: A través de `roles` y `role_permissions`
- **Permisos directos**: A través de `profile_permissions`

## Mejores Prácticas

### Para la Gestión de Usuarios

1. **Creación de Usuario**
   ```typescript
   const createUser = async (email: string, password: string, userData: any, vendorId: string) => {
     // 1. Crear usuario en auth.users
     const { data: authUser, error: authError } = await supabase.auth.signUp({
       email,
       password,
     });
     
     if (authError) throw authError;
     
     // 2. Crear perfil asociado
     const { data: profile, error: profileError } = await supabase
       .from('profiles')
       .insert([{
         user_id: authUser.user.id,
         // otros datos del perfil
         ...userData
       }])
       .select();
     
     if (profileError) throw profileError;
     
     // 3. Crear entrada en public.users con referencias
     const { data: publicUser, error: publicUserError } = await supabase
       .from('users')
       .insert([{
         id: authUser.user.id,  // Mismo ID que auth.users
         email: authUser.user.email,
         profile_id: profile[0].id,
         vendor_id: vendorId,
         // otros campos personalizados
       }])
       .select();
     
     if (publicUserError) throw publicUserError;
     
     return { authUser, profile, publicUser };
   };
   ```

2. **Sincronización entre auth.users y public.users**
   ```typescript
   // Función para mantener actualizada public.users desde auth.users
   const syncAuthUserToPublic = async (authUser) => {
     const { data, error } = await supabase
       .from('users')
       .upsert([{
         id: authUser.id,
         email: authUser.email,
         // Mantener los campos que no se actualizan aquí
       }], {
         onConflict: 'id',
         // Sólo actualizar campos que provienen de auth.users
         ignoreDuplicates: false
       });
       
     if (error) console.error('Error al sincronizar usuario:', error);
     return data;
   };
   ```

3. **Asignación de Rol a Usuario (usando public.users)**
   ```typescript
   const assignRoleToUser = async (userId: string, roleId: string) => {
     // Actualizar directamente en public.users para una referencia rápida
     const { data, error } = await supabase
       .from('users')
       .update({ role_id: roleId })
       .eq('id', userId)
       .select();
       
     if (error) throw error;
     return data;
   };
   ```

4. **Obtención de Datos de Usuario con Referencias Optimizadas**
   ```typescript
   const getCompleteUserData = async (userId: string) => {
     const { data, error } = await supabase
       .from('users')
       .select(`
         *,
         profile:profile_id(*),
         role:role_id(*),
         vendor:vendor_id(*)
       `)
       .eq('id', userId)
       .single();
       
     if (error) throw error;
     return data;
   };
   ```

### Para la Gestión de Permisos

1. **Verificación de Permisos (Optimizada para public.users)**
   ```typescript
   const checkPermission = async (userId: string, resource: string, action: string) => {
     // Consulta RPC personalizada que verifica permisos utilizando la estructura de public.users
     const { data, error } = await supabase
       .rpc('user_has_permission_optimized', {
         user_uuid: userId,
         resource: resource,
         action: action
       });
       
     if (error) throw error;
     return !!data;
   };
   ```

2. **Verificación en Middleware (con cache)**
   ```typescript
   // Usando un Map para cachear permisos temporalmente
   const permissionCache = new Map();
   
   const requirePermission = (resource: string, action: string) => {
     return async (req: any, res: any, next: any) => {
       const userId = req.user?.id;
       if (!userId) {
         return res.status(401).json({ error: 'No autenticado' });
       }
       
       const cacheKey = `${userId}:${resource}:${action}`;
       
       // Verificar cache primero
       if (permissionCache.has(cacheKey)) {
         const hasPermission = permissionCache.get(cacheKey);
         if (!hasPermission) {
           return res.status(403).json({ error: 'Acceso denegado' });
         }
         return next();
       }
       
       // Si no está en cache, verificar permiso
       try {
         const hasPermission = await checkPermission(userId, resource, action);
         
         // Almacenar en cache (con expiración de 5 minutos)
         permissionCache.set(cacheKey, hasPermission);
         setTimeout(() => permissionCache.delete(cacheKey), 5 * 60 * 1000);
         
         if (!hasPermission) {
           return res.status(403).json({ error: 'Acceso denegado' });
         }
         
         next();
       } catch (error) {
         console.error('Error verificando permiso:', error);
         return res.status(500).json({ error: 'Error interno' });
       }
     };
   };
   ```

### Para la Gestión de Roles

1. **Creación de Roles**
   ```typescript
   const createRole = async (name: string, description: string) => {
     const { data, error } = await supabase
       .from('roles')
       .insert([{
         name,
         description
       }])
       .select();
       
     if (error) throw error;
     return data;
   };
   ```

2. **Asignación de Permisos a Rol**
   ```typescript
   const assignPermissionToRole = async (roleId: string, permissionId: string) => {
     const { data, error } = await supabase
       .from('role_permissions')
       .insert([{
         role_id: roleId,
         permission_id: permissionId
       }])
       .select();
       
     if (error) throw error;
     return data;
   };
   ```

3. **Actualización de Rol en Todos los Usuarios de un Proveedor**
   ```typescript
   const updateRoleForVendorUsers = async (vendorId: string, roleId: string) => {
     const { data, error } = await supabase
       .from('users')
       .update({ role_id: roleId })
       .eq('vendor_id', vendorId)
       .select();
       
     if (error) throw error;
     return data;
   };
   ```

## Funciones SQL Optimizadas

```sql
-- Función para verificar permisos (optimizada para usar public.users)
CREATE OR REPLACE FUNCTION public.user_has_permission_optimized(
  user_uuid UUID,
  resource TEXT,
  action TEXT
)
RETURNS BOOLEAN AS $$
DECLARE
  has_permission BOOLEAN;
  user_profile_id UUID;
  user_role_id UUID;
BEGIN
  -- Obtener profile_id y role_id directamente de public.users
  SELECT profile_id, role_id INTO user_profile_id, user_role_id
  FROM public.users
  WHERE id = user_uuid;
  
  -- Verificar permisos directos del perfil
  SELECT EXISTS (
    SELECT 1
    FROM profile_permissions pp
    WHERE pp.profile_id = user_profile_id
    AND pp.resource = resource
    AND pp.action = action
  ) INTO has_permission;
  
  IF has_permission THEN
    RETURN TRUE;
  END IF;
  
  -- Verificar permisos basados en roles (usando role_id de public.users)
  IF user_role_id IS NOT NULL THEN
    SELECT EXISTS (
      SELECT 1
      FROM role_permissions rp
      JOIN permissions perm ON rp.permission_id = perm.id
      WHERE rp.role_id = user_role_id
      AND perm.resource = resource
      AND perm.action = action
    ) INTO has_permission;
  END IF;
  
  RETURN has_permission;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Función para mantener sincronizada public.users con auth.users
CREATE OR REPLACE FUNCTION sync_auth_user_to_public()
RETURNS TRIGGER AS $$
BEGIN
  IF TG_OP = 'INSERT' THEN
    INSERT INTO public.users (id, email, created_at)
    VALUES (NEW.id, NEW.email, NEW.created_at)
    ON CONFLICT (id) DO NOTHING;
  ELSIF TG_OP = 'UPDATE' THEN
    UPDATE public.users
    SET email = NEW.email, updated_at = NEW.updated_at
    WHERE id = NEW.id;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger para sincronización automática
CREATE TRIGGER trigger_sync_auth_user
AFTER INSERT OR UPDATE ON auth.users
FOR EACH ROW EXECUTE PROCEDURE sync_auth_user_to_public();
```

## Políticas RLS Recomendadas

```sql
-- Tabla public.users
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Los usuarios pueden ver su propia información"
ON public.users FOR SELECT
USING (auth.uid() = id);

CREATE POLICY "Los administradores pueden ver todos los usuarios"
ON public.users FOR SELECT
USING (
  EXISTS (
    SELECT 1 FROM public.users u
    WHERE u.id = auth.uid() AND u.role_id IN (
      SELECT id FROM roles WHERE name = 'admin'
    )
  )
);

CREATE POLICY "Los administradores pueden modificar usuarios"
ON public.users FOR UPDATE
USING (
  EXISTS (
    SELECT 1 FROM public.users u
    WHERE u.id = auth.uid() AND u.role_id IN (
      SELECT id FROM roles WHERE name = 'admin'
    )
  )
);

-- Política para que los gerentes de vendedor puedan ver usuarios de su vendedor
CREATE POLICY "Los gerentes pueden ver usuarios de su vendedor"
ON public.users FOR SELECT
USING (
  EXISTS (
    SELECT 1 FROM public.users u
    WHERE u.id = auth.uid() 
    AND u.role_id IN (SELECT id FROM roles WHERE name = 'vendor_manager')
    AND u.vendor_id = public.users.vendor_id
  )
);

-- Roles (solo administradores)
CREATE POLICY "Solo administradores pueden gestionar roles"
ON roles FOR ALL
USING (
  EXISTS (
    SELECT 1 FROM public.users u
    WHERE u.id = auth.uid() AND u.role_id IN (
      SELECT id FROM roles WHERE name = 'admin'
    )
  )
);

-- Permisos de perfil
CREATE POLICY "Los usuarios pueden ver sus propios permisos"
ON profile_permissions FOR SELECT
USING (
  EXISTS (
    SELECT 1 FROM public.users u
    WHERE u.id = auth.uid() AND u.profile_id = profile_permissions.profile_id
  )
);
```

## Índices Recomendados

```sql
-- Índices para optimizar las consultas frecuentes
CREATE INDEX IF NOT EXISTS idx_users_profile_id ON public.users(profile_id);
CREATE INDEX IF NOT EXISTS idx_users_role_id ON public.users(role_id);
CREATE INDEX IF NOT EXISTS idx_users_vendor_id ON public.users(vendor_id);
CREATE INDEX IF NOT EXISTS idx_profile_permissions_profile_id ON profile_permissions(profile_id);
CREATE INDEX IF NOT EXISTS idx_role_permissions_role_id ON role_permissions(role_id);
```

## Diagrama Entidad-Relación

```
auth.users           public.users            profiles
+-----------+        +--------------+        +--------------+
| id        |<------>| id           |<------>| id           |
| email     |        | email        |        | user_id      |
| password  |        | profile_id   |------->| name         |
| ...       |        | role_id      |        | ...          |
+-----------+        | vendor_id    |        +--------------+
                     | ...          |
                     +--------------+
                          |    |
                          |    |
                          |    +----------------+
                          |                     |
                          v                     v
                     roles                    vendors
                     +--------------+        +--------------+
                     | id           |        | id           |
                     | name         |        | name         |
                     | description  |        | ...          |
                     | ...          |        |              |
                     +--------------+        +--------------+
                          |
                          |
                          |
            role_permissions       permissions
            +--------------+      +--------------+
            | id           |      | id           |
            | role_id      |----->| name         |
            | permission_id|      | resource     |
            | ...          |      | action       |
            +--------------+      | ...          |
                                  +--------------+
```

## Implementación Front-end

```typescript
// Hook para obtener datos de usuario con su rol y permisos
const useUserWithRoleAndPermissions = (userId: string) => {
  const [userData, setUserData] = useState(null);
  const [permissions, setPermissions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    const fetchData = async () => {
      try {
        // Obtener información de usuario con relaciones
        const { data: user, error: userError } = await supabase
          .from('users')
          .select(`
            *,
            profile:profile_id(*),
            role:role_id(*),
            vendor:vendor_id(*)
          `)
          .eq('id', userId)
          .single();
        
        if (userError) throw userError;
        
        // Obtener permisos del usuario
        const { data: userPermissions, error: permError } = await supabase
          .rpc('get_user_permissions', { user_uuid: userId });
        
        if (permError) throw permError;
        
        setUserData(user);
        setPermissions(userPermissions);
      } catch (err) {
        setError(err);
      } finally {
        setLoading(false);
      }
    };
    
    if (userId) {
      fetchData();
    }
  }, [userId]);
  
  return { userData, permissions, loading, error };
};

// Hook para filtrar usuarios por vendedor
const useVendorUsers = (vendorId: string) => {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    const fetchVendorUsers = async () => {
      try {
        const { data, error } = await supabase
          .from('users')
          .select(`
            *,
            profile:profile_id(*),
            role:role_id(*)
          `)
          .eq('vendor_id', vendorId);
          
        if (error) throw error;
        
        setUsers(data);
      } catch (err) {
        setError(err);
      } finally {
        setLoading(false);
      }
    };
    
    if (vendorId) {
      fetchVendorUsers();
    }
  }, [vendorId]);
  
  return { users, loading, error };
};

// Componente de protección por permisos
const RequirePermission = ({ 
  resource, 
  action, 
  children, 
  fallback = null 
}) => {
  const { user } = useAuth(); // Hook de autenticación
  const [hasPermission, setHasPermission] = useState(false);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    const checkUserPermission = async () => {
      if (!user) {
        setHasPermission(false);
        setLoading(false);
        return;
      }
      
      try {
        const { data } = await supabase
          .rpc('user_has_permission_optimized', {
            user_uuid: user.id,
            resource,
            action
          });
        
        setHasPermission(!!data);
      } catch (error) {
        console.error('Error verificando permisos:', error);
        setHasPermission(false);
      } finally {
        setLoading(false);
      }
    };
    
    checkUserPermission();
  }, [user, resource, action]);
  
  if (loading) {
    return <div>Verificando permisos...</div>;
  }
  
  return hasPermission ? children : fallback;
};
```

## Consideraciones para AWS PostgreSQL

1. **Diferencias en la estructura de autenticación**
   - Supabase utiliza `auth.users` para autenticación integrada
   - En AWS, probablemente usarás Cognito, IAM, o similar
   - Necesitarás adaptar el modelo de sincronización para tu nuevo sistema de auth

2. **Migración de la estructura**
   ```sql
   -- Crear estructura en AWS PostgreSQL
   CREATE TABLE IF NOT EXISTS public.users (
     id UUID PRIMARY KEY,
     email VARCHAR(255) NOT NULL,
     profile_id UUID REFERENCES profiles(id),
     role_id UUID REFERENCES roles(id),
     vendor_id UUID REFERENCES vendors(id),
     created_at TIMESTAMPTZ DEFAULT NOW(),
     updated_at TIMESTAMPTZ DEFAULT NOW()
   );
   
   -- Índices
   CREATE INDEX IF NOT EXISTS idx_users_profile_id ON public.users(profile_id);
   CREATE INDEX IF NOT EXISTS idx_users_role_id ON public.users(role_id);
   CREATE INDEX IF NOT EXISTS idx_users_vendor_id ON public.users(vendor_id);
   ```

3. **Adaptación de funciones RPC**
   - Las funciones RPC de Supabase tendrán que recrearse en AWS PostgreSQL
   - Las políticas RLS necesitarán ajustarse según tu nuevo sistema de autenticación

4. **Sincronización de datos**
   ```bash
   # Exportar datos desde Supabase
   pg_dump -h db.supabase.co -p 5432 -U postgres -d postgres --data-only -t public.users -f users_data.sql
   
   # Importar en AWS PostgreSQL
   psql -h your-aws-instance -U postgres -d your_db -f users_data.sql
   ```

## Recomendaciones Finales

1. **Utiliza transacciones para operaciones críticas**
   ```typescript
   const createUserWithRole = async (userData, roleId, vendorId) => {
     // Iniciar una transacción en el cliente
     const { error } = await supabase.rpc('begin_transaction');
     if (error) throw error;
     
     try {
       // Ejecutar operaciones dentro de la transacción
       const { data: user } = await createUser(userData);
       
       // Actualizar user con rol y vendedor
       await supabase
         .from('users')
         .update({ 
           role_id: roleId,
           vendor_id: vendorId 
         })
         .eq('id', user.id);
       
       // Confirmar transacción
       await supabase.rpc('commit_transaction');
       return user;
     } catch (error) {
       // Revertir en caso de error
       await supabase.rpc('rollback_transaction');
       throw error;
     }
   };
   ```

2. **Implementa auditoría de cambios**
   ```sql
   CREATE TABLE audit_logs (
     id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
     table_name TEXT NOT NULL,
     record_id UUID NOT NULL,
     action TEXT NOT NULL,
     old_data JSONB,
     new_data JSONB,
     changed_by UUID REFERENCES public.users(id),
     timestamp TIMESTAMPTZ DEFAULT NOW()
   );
   
   -- Ejemplo de trigger para auditar cambios en roles
   CREATE OR REPLACE FUNCTION audit_role_changes()
   RETURNS TRIGGER AS $$
   BEGIN
     INSERT INTO audit_logs (table_name, record_id, action, old_data, new_data, changed_by)
     VALUES (
       'roles',
       CASE WHEN TG_OP = 'DELETE' THEN OLD.id ELSE NEW.id END,
       TG_OP,
       CASE WHEN TG_OP = 'DELETE' OR TG_OP = 'UPDATE' THEN row_to_json(OLD) ELSE NULL END,
       CASE WHEN TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN row_to_json(NEW) ELSE NULL END,
       auth.uid()
     );
     
     IF TG_OP = 'DELETE' THEN
       RETURN OLD;
     ELSE
       RETURN NEW;
     END IF;
   END;
   $$ LANGUAGE plpgsql SECURITY DEFINER;
   
   -- Aplicar el trigger
   CREATE TRIGGER role_audit_trigger
   AFTER INSERT OR UPDATE OR DELETE ON roles
   FOR EACH ROW EXECUTE PROCEDURE audit_role_changes();
   ```

3. **Implementa filtrado por vendedor**
   ```typescript
   // Función para filtrar registros por vendedor del usuario actual
   const applyVendorFilter = (query, includeAdmin = true) => {
     return async (req, res, next) => {
       const userId = req.user?.id;
       if (!userId) {
         return res.status(401).json({ error: 'No autenticado' });
       }
       
       try {
         // Obtener información del usuario
         const { data: userData, error } = await supabase
           .from('users')
           .select('role_id, vendor_id')
           .eq('id', userId)
           .single();
           
         if (error) throw error;
         
         // Verificar si es admin (opcional)
         if (includeAdmin) {
           const { data: isAdmin } = await supabase
             .from('roles')
             .select('name')
             .eq('id', userData.role_id)
             .single();
             
           if (isAdmin && isAdmin.name === 'admin') {
             // Los admins ven todo
             req.query = query;
             return next();
           }
         }
         
         // Aplicar filtro por vendor_id
         if (userData.vendor_id) {
           req.query = {
             ...query,
             vendor_id: userData.vendor_id
           };
         }
         
         next();
       } catch (error) {
         console.error('Error aplicando filtro por vendedor:', error);
         return res.status(500).json({ error: 'Error interno' });
       }
     };
   };
   ```

4. **Pruebas unitarias y de integración**
   ```typescript
   // Ejemplo de test para verificación de permisos
   describe('Sistema de permisos', () => {
     let userId, roleId, vendorId;
     
     beforeAll(async () => {
       // Crear vendedor de prueba
       const { data: vendor } = await supabase
         .from('vendors')
         .insert([{ name: 'Vendor Test' }])
         .select();
       vendorId = vendor[0].id;
       
       // Crear usuario de prueba
       const { user } = await supabase.auth.signUp({
         email: 'test@example.com',
         password: 'password123'
       });
       userId = user.id;
       
       // Crear rol de prueba
       const { data: role } = await createRole('tester', 'Rol para pruebas');
       roleId = role[0].id;
       
       // Asignar permiso al rol
       await assignPermissionToRole(roleId, 'test_resource', 'read');
       
       // Actualizar usuario con rol y vendedor
       await supabase
         .from('users')
         .update({ 
           role_id: roleId,
           vendor_id: vendorId 
         })
         .eq('id', userId);
     });
     
     test('El usuario debe tener permiso para leer test_resource', async () => {
       const hasPermission = await checkPermission(userId, 'test_resource', 'read');
       expect(hasPermission).toBe(true);
     });
     
     test('El usuario debe estar asociado al vendedor correcto', async () => {
       const { data } = await supabase
         .from('users')
         .select('vendor_id')
         .eq('id', userId)
         .single();
         
       expect(data.vendor_id).toBe(vendorId);
     });
   });
   ```

5. **Segmentación por vendedor**
   ```typescript
   // Función para obtener datos segmentados por vendedor
   const getVendorSegmentedData = async (tableName, userId) => {
     // Primero obtenemos el vendor del usuario
     const { data: userData, error: userError } = await supabase
       .from('users')
       .select('vendor_id, role:role_id(name)')
       .eq('id', userId)
       .single();
       
     if (userError) throw userError;
     
     // Consulta base
     let query = supabase.from(tableName).select('*');
     
     // Si no es admin, filtramos por vendor_id
     if (userData.role.name !== 'admin') {
       query = query.eq('vendor_id', userData.vendor_id);
     }
     
     const { data, error } = await query;
     
     if (error) throw error;
     return data;
   };
   ```